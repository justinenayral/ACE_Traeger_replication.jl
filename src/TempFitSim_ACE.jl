#TempFitSim_ACE

using MAT
using LinearAlgebra
using Plots

##First, the authors use the MAGICC6.0 model by Meinshausen, Raper and Wigley(2011) to simulate
#the RCP scenario over a time horizon of 400 years.

#The calibration of ACE uses 2 ocean layers(upper and deep) compared to MAGGIC's 50 layers and DICE's ocean layers

#Setup:
Startdate=2015
Enddate=2400

#Fixed settings of final Calibration
cs=3 #climate sensitivity
η=3.8 #forcing parameter used to calculate CO2equivalents from RF
timestep=10 #Number of time step
Oceanlayers=2 #Number of ocean layers used in calibration
Selectlayers=[5, 40] # Ocean layer's of Magicc used in calibration for shallow ocean (layer 5) and deep ocean (layer 40)
weight=[4, 2, 1] # sets weights for error returned, weight on atmosphere, shallow, and deep ocean
σ=[0.538194273157518,	0.0765198358638229,	0.00399267991987196,	0.461805699284704,	0.0274865322002226] #Corresponding sigma (heat flows between adjacent layers), same as in TMDynamics.m

#importing Magicc 6.0 data generated by CT using downloaded version of Magicc 6.
data=matread(path*"//MagiccOcean.mat")


#Get the name of all the variables: MagiccOcean is a Dictionnary with Dictionnaries inside
scenario = collect(keys(data["MagiccOcean"]))
S=length(scenario) #Number of scenarios

#define the first and the end dates
startpos = findfirst(data["MagiccOcean"][scenario[1]]["Year"].==Startdate)[1]
endpos = findfirst(data["MagiccOcean"][scenario[1]]["Year"].==Enddate)[1]

#CHeck that the index for the first and the last dates in the data are consistent
if endpos-startpos!=Enddate-Startdate
    error("Years Missing, interrrupt")
end

#Read the Layer's names and initialize the Temp matrix (layers (atm and ocean) , scenarios , horizon )
Layer=data["MagiccOcean"][scenario[1]]["Layer"] #Read in layer names
Temp = zeros(Oceanlayers + 1, S, floor(Int, (endpos - startpos) / timestep + 1))
RF = zeros(S, floor(Int, (endpos - startpos) / timestep + 1)) #Radiative forcing (greenhouse effect)

for s=1:S
    RF[s, :] = data["MagiccOcean"][scenario[s]]["RFtot"][startpos:timestep:endpos]'
    Temp[1, s, :] = data["MagiccOcean"][scenario[s]]["Tempatm"][startpos:timestep:endpos]' 
    for l = 1:Oceanlayers
        Temp[l+1, s, :] = data["MagiccOcean"][scenario[s]]["Temp"][startpos:timestep:endpos, Selectlayers[l]]' 
    end
end 

#forcing
forcing=exp.(log(2)/η*RF)

#We define the parameter xi1=log(2)/s:
xi_base=zeros(Oceanlayers+1)

for i in 1:length(xi_base)
xi_base[i]=log(2)/cs
end

#Get the size of the three vectors
(layers, scenarios, horizon) = size(Temp)

#Temp: 3-D temperature field: layers (atmosphere and ocean) , scenarios , horizon 

logic = true

# Call the function TempSimulation_ACE to run the simulation
Simulation=TempSimulation_ACE(σ, Temp, forcing, xi_base, weight, logic)


##Evaluating results for print out on screen and saving, using Magicc data
# Assign sigma_up (first layers) and sigma_down (upper layers):
optim=Dict()
optim["σ_up"]=σ[1:layers]
optim["σ_down"]=σ[layers+1:2*layers-1]

# Construct TempHelpDown and TempHelpUp matrices
TempHelpDown = [zeros(layers-1, 1) diagm(optim["σ_down"][1:layers-1]); zeros(1, layers)]
TempHelpUp = [zeros(1, layers); diagm(optim["σ_up"][2:layers]) zeros(layers-1, 1)] #OK

# Assign taubar
taubar = 1
optim["TempMatrix"]=diagm(1 .- optim["σ_up"] - [optim["σ_down"]; 0]) + TempHelpDown + TempHelpUp
optim["xi"]=Simulation["xi"]

pos_2015 = findfirst(data["MagiccOcean"][scenario[1]]["Year"].==2015)[1] 

RF_init=zeros(S,1)
Temp_init=zeros(Oceanlayers+1, S)
for s = 1:S
    RF_init[s, :] .= data["MagiccOcean"][scenario[s]]["RFtot"][pos_2015]'
    Temp_init[1, s, :] .= data["MagiccOcean"][scenario[s]]["Tempatm"][pos_2015]' # Note: Use square brackets for indexing dictionaries
    for l = 1:Oceanlayers
        Temp_init[l + 1, s, :] .= data["MagiccOcean"][scenario[s]]["Temp"][pos_2015]'
    end
end

optim["τ_initial"] = exp.(diagm(optim["xi"]) * Temp_init)
optim["Temp_initial"] = Temp_init # [layers scenarios] in 2015


####Plotting
#Export extra datasets to get other specifications
d=matread(path*"//TempDataCalel.mat")

#Necessary variables for graph
d["data"]["year_ACE"] = Startdate:timestep:Enddate
d["data"]["year_Magicc"] = Startdate:timestep:Enddate

#CHeck the minimum and maximum year of each specifications
maxyearplot = maximum(d["data"]["year_ACE"]) + 5
minyearplot = minimum(d["data"]["year_ACE"]) - 5

maxyearplot_DICE = findlast(x -> x <= min(maximum(d["data"]["DICE13"][:, 2]), maxyearplot), d["data"]["DICE13"][:, 2])
minyearplot_DICE = findfirst(x -> x >= max(minimum(d["data"]["DICE13"][:, 2]), minyearplot), d["data"]["DICE13"][:, 2])

maxyearplot_PAGE = findlast(x -> x <= min(maximum(d["data"]["PAGE"][:, 2]), maxyearplot), d["data"]["PAGE"][:, 2])
minyearplot_PAGE = findfirst(x -> x >= max(minimum(d["data"]["PAGE"][:, 2]), minyearplot), d["data"]["PAGE"][:, 2])

maxyearplot_FUND = findlast(x -> x <= min(maximum(d["data"]["FUND"][:, 2]), maxyearplot), d["data"]["FUND"][:, 2])
minyearplot_FUND = findfirst(x -> x >= max(minimum(d["data"]["FUND"][:, 2]), minyearplot), d["data"]["FUND"][:, 2])

#Define the legend
legend=["RCP 6 to 4.5", "RCP 3", "RCP 4.5", "RCP 8.5", "RECP 4.5 to 3", "RCP 6"]
#Initialization of the variables for building the plot
Temp_plot=zeros(39,3)
TempSim_plot=zeros(39,3)
Temp_combined_plot_atm=zeros(39,6)
Temp_combined_plot_atm_sim=zeros(39,6)

#
for i=1:scenarios # This loop over scenarios closes only for final all scenario plots

    for l = 1:Oceanlayers + 1
        Temp_plot[:, l] = Temp[l, i, :]
        TempSim_plot[:, l] .= Simulation["Tempsim"][l, i, :]
    
        if l == 1
            # Saving for plot containing only atm layer but all scenarios
            Temp_combined_plot_atm[:, i] = Temp[l, i, :]
            Temp_combined_plot_atm_sim[:, i] = Simulation["Tempsim"][l, i, :]
        end
    end

end

# Joint scenario plots
g = plot(title="Temp Fit all scen", xlabel="year", ylabel="Temperature")
legend=["RCP 6 to 4.5", "RCP 3", "RCP 4.5", "RCP 8.5", "RECP 4.5 to 3", "RCP 6"]
colors = ["deepskyblue2",  "midnightblue",   "red2",   "olivedrab3",   "darkgreen",   "indigo"]

order=[2, 5, 3, 1, 6, 4]

for i in order
    plot!(Startdate:timestep:Enddate, Temp_combined_plot_atm_sim[:,i], linestyle=:dash, color=colors[i], linewidth=2, label="")
    plot!(Startdate:timestep:Enddate, Temp_combined_plot_atm[:,i], color=colors[i], linewidth=2, label=legend[i])
end

hline!([-Inf], color=:black, linestyle=:solid, label="MAGICC")
hline!([-Inf], color=:black, linestyle=:dash, label="ACE", linewidth=2)

# Plot DICE13, PAGE, and FUND
plot!(d["data"]["DICE13"][minyearplot_DICE:maxyearplot_DICE, 2], d["data"]["DICE13"][minyearplot_DICE:maxyearplot_DICE, 3], linestyle=:dash, linewidth=1, label="DICE", color=:pink)
plot!(d["data"]["PAGE"][minyearplot_PAGE:maxyearplot_PAGE, 2], d["data"]["PAGE"][minyearplot_PAGE:maxyearplot_PAGE, 3], linestyle=:dash, linewidth=1, label="PAGE", color=:lightskyblue2)
plot!(d["data"]["FUND"][minyearplot_FUND:maxyearplot_FUND, 2], d["data"]["FUND"][minyearplot_FUND:maxyearplot_FUND, 3], linestyle=:dash, linewidth=1, label="FUND", color=:grey)

for i in 2:4
    plot!(d["data"]["DICE13"][minyearplot_DICE:maxyearplot_DICE, 2], d["data"]["DICE13"][minyearplot_DICE:maxyearplot_DICE, 2+i], linestyle=:dash, linewidth=1, label="", color=:pink)
    plot!(d["data"]["PAGE"][minyearplot_PAGE:maxyearplot_PAGE, 2], d["data"]["PAGE"][minyearplot_PAGE:maxyearplot_PAGE, 2+i], linestyle=:dash, linewidth=1, label="", color=:lightskyblue2)
    plot!(d["data"]["FUND"][minyearplot_FUND:maxyearplot_FUND, 2], d["data"]["FUND"][minyearplot_FUND:maxyearplot_FUND, 2+i], linestyle=:dash, linewidth=1, label="", color=:grey)
end
plot!(legendfontsize=6)

# Set xlabel and ylabel
xlabel!("year")
ylabel!("Degrees (Celsius) above preindustrial")
title!("Temperature dynamics calibration")

savefig(graphpath*"figure3.png") 
